/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.list

class LinkedList : List<String> {
    private var head: Node? = null

    /**
     * Appends the given string to the end of the list.
     *
     * If the list is empty the element becomes the new head; otherwise it is linked as the current tail's next node.
     *
     * @param element The string to append.
     */
    fun add(element: String) {
        val newNode = Node(element)

        val it = tail(head)
        if (it == null) {
            head = newNode
        } else {
            it.next = newNode
        }
    }

    /**
     * Returns the last node (tail) of the singly linked list starting from [head], or `null` if the list is empty.
     *
     * @param head the starting node of the list, or `null` for an empty list
     * @return the tail node or `null` when [head] is `null`
     */
    private fun tail(head: Node?): Node? {
        var it: Node?

        it = head
        while (it?.next != null) {
            it = it.next
        }

        return it
    }

    /**
     * Removes the first occurrence of the given element from the list.
     *
     * Searches from the head and unlinks the first node whose data equals the provided
     * element (case-sensitive). Only the first match is removed.
     *
     * @param element The string value to remove (case-sensitive).
     * @return True if a node was removed; false if no matching element was found.
     */
    fun remove(element: String): Boolean {
        var result = false
        var previousIt: Node? = null
        var it: Node? = head
        while (!result && it != null) {
            if (0 == element.compareTo(it.data)) {
                result = true
                unlink(previousIt, it)
                break
            }
            previousIt = it
            it = it.next
        }

        return result
    }

    /**
     * Unlink a node from the list by updating the predecessor or the head.
     *
     * If `currentIt` is the head, updates `head` to `currentIt.next`; otherwise sets
     * `previousIt.next` to `currentIt.next` to remove `currentIt` from the chain.
     *
     * @param previousIt Node immediately before `currentIt`, or null when `currentIt` is the head.
     * @param currentIt The node to remove from the list.
     */
    private fun unlink(previousIt: Node?, currentIt: Node) {
        if (currentIt == head) {
            head = currentIt.next
        } else {
            previousIt?.next = currentIt.next
        }
    }

    /**
     * Counts and returns the number of nodes in the linked list.
     *
     * Traverses the list from the current head to the end to compute the size (O(n)).
     *
     * @return The number of elements currently stored in the list.
     */
    fun calculateSize(): Int {
        var size = 0

        var it = head
        while (it != null) {
            ++size
            it = it.next
        }

        return size
    }

    /**
     * Returns the node at the specified 0-based index, or null if the index is negative or out of range.
     *
     * Traverses from the list head advancing `idx` steps. If `idx` is negative, or the list is shorter than
     * `idx + 1` elements, this function returns null.
     *
     * @param idx 0-based index of the node to retrieve.
     * @return the Node at the given index, or null when `idx` < 0 or no such node exists.
     */
    private fun getNodeAt(idx: Int): Node? {
        if (idx < 0) return null
        var index = idx
        var it = head
        while (index > 0 && it != null) {
            it = it.next
            index--
        }
        return it
    }

    private data class Node(val data: String) {
        var next: Node? = null
    }

    override val size: Int
        get() = calculateSize()

    /**
     * Returns true if the list contains an element equal to [element].
     *
     * Performs a case-sensitive equality check and stops at the first match.
     *
     * @param element element to search for
     * @return `true` if an equal element is found, `false` otherwise
     */
    override fun contains(element: String): Boolean {
        throw UnsupportedOperationException("Not yet implemented")
    }

    /**
     * Returns true if this list contains all elements in the specified collection.
     *
     * The check is performed using element equality (case-sensitive for strings). An empty
     * `elements` collection always returns `true`.
     *
     * @param elements Collection of strings to test for membership in this list.
     * @return `true` if every element in `elements` is contained in this list; `false` otherwise.
     */
    override fun containsAll(elements: Collection<String>): Boolean {
        throw UnsupportedOperationException("Not yet implemented")
    }

    /**
     * Returns the element at the specified zero-based index.
     *
     * @return The string at the given index.
     * @throws IndexOutOfBoundsException if the index is negative or not less than the list size.
     */
    override fun get(index: Int): String {
        val node = getNodeAt(index) ?: throw IndexOutOfBoundsException("Index: $index")
        return node.data
    }

    /**
     * Returns the index of the first occurrence of the specified element in this list, or -1 if the list does not contain the element.
     *
     * The search is case-sensitive and uses equality of strings. Currently not implemented.
     *
     * @throws UnsupportedOperationException Always thrown until this method is implemented.
     */
    override fun indexOf(element: String): Int {
        throw UnsupportedOperationException("Not yet implemented")
    }

    /**
     * Returns true if the list contains no elements.
     *
     * @return `true` when the list is empty (i.e., `head == null`), otherwise `false`.
     */
    override fun isEmpty(): Boolean {
        return head == null
    }

    /**
     * Returns an iterator over the elements in this list.
     *
     * Currently not implemented; calling this function will always throw an exception.
     *
     * @return an Iterator over the list's elements
     * @throws UnsupportedOperationException always thrown by this implementation
     */
    override fun iterator(): Iterator<String> {
        throw UnsupportedOperationException("Not yet implemented")
    }

    /**
     * Returns the index of the last occurrence of [element] in the list.
     *
     * Currently not implemented and will always throw [UnsupportedOperationException].
     *
     * Intended behavior when implemented: return the zero-based index of the last
     * element that is equal to [element] (case-sensitive). If the element is not
     * found, return -1.
     *
     * @param element The element to search for (case-sensitive).
     * @throws UnsupportedOperationException Always thrown until this method is implemented.
     */
    override fun lastIndexOf(element: String): Int {
        throw UnsupportedOperationException("Not yet implemented")
    }

    /**
 * Returns a list iterator over the elements in this list, starting at the beginning.
 *
 * The returned iterator starts at index 0 and iterates over a snapshot of the list's elements.
 *
 * @return a ListIterator positioned before the first element.
 */
override fun listIterator(): ListIterator<String> = listIterator(0)

    /**
     * Returns a ListIterator over a snapshot of this list, positioned at the given index.
     *
     * The iterator iterates over a stable copy of the list taken at the time of this call;
     * subsequent modifications to the original list do not affect the iterator's sequence.
     *
     * @param index start position for the iterator (valid range: 0..size)
     * @return a ListIterator<String> positioned at `index`
     * @throws IndexOutOfBoundsException if `index` is outside 0..size
     */
    override fun listIterator(index: Int): ListIterator<String> {
        if (index < 0 || index > size) throw IndexOutOfBoundsException("Index: $index, Size: $size")
        val snapshot = this.toList()
        return object : ListIterator<String> {
            private var pos = index
            /**
 * Returns true if the iterator has more elements in the snapshot.
 *
 * The iterator iterates over a snapshot of the list taken when the iterator was created;
 * this method checks whether the current position is before the end of that snapshot.
 *
 * @return true if there is a next element available in the snapshot.
 */
override fun hasNext(): Boolean = pos < snapshot.size
            /**
             * Returns the next element from the iterator's snapshot and advances the cursor by one.
             *
             * @return The next String from the snapshot.
             * @throws NoSuchElementException If the iterator has no more elements.
             */
            override fun next(): String {
                if (!hasNext()) throw NoSuchElementException()
                return snapshot[pos++]
            }
            /**
 * Returns true if there is a previous element (i.e., the iterator is not at the start).
 *
 * @return true if a call to `previous()` would succeed.
 */
override fun hasPrevious(): Boolean = pos > 0
            /**
             * Return the previous element from the iterator's snapshot and move the cursor one position toward the start.
             *
             * Moves the iterator position backward and returns the element at the new cursor location within the snapshot
             * captured when the iterator was created.
             *
             * @return the previous element in the snapshot.
             * @throws NoSuchElementException if there is no previous element (cursor is at the start).
             */
            override fun previous(): String {
                if (!hasPrevious()) throw NoSuchElementException()
                return snapshot[--pos]
            }
            /**
 * Returns the index of the element that would be returned by a subsequent `next()` call.
 *
 * For this snapshot-based iterator, this is the current cursor position (`pos`), in the range `0..size`.
 *
 * @return the index of the next element (equal to the iterator's cursor position)
 */
override fun nextIndex(): Int = pos
            /**
 * Returns the index of the element that would be returned by a subsequent call to `previous()`.
 *
 * @return the previous element's index, or -1 if the iterator is at the beginning of the list.
 */
override fun previousIndex(): Int = pos - 1
        }
    }

    /**
     * Returns a new list containing the elements in the specified range [fromIndex, toIndex).
     *
     * The returned list is a snapshot (new ArrayList) of the elements from this linked list starting
     * at the zero-based index `fromIndex` (inclusive) up to `toIndex` (exclusive), preserving iteration order.
     *
     * @param fromIndex start index (inclusive), zero-based
     * @param toIndex end index (exclusive), zero-based
     * @return a new List<String> containing the requested range
     * @throws IndexOutOfBoundsException if fromIndex < 0, toIndex < fromIndex, or toIndex > size
     */
    override fun subList(fromIndex: Int, toIndex: Int): List<String> {
        if (fromIndex < 0 || toIndex < fromIndex || toIndex > size) {
            throw IndexOutOfBoundsException("fromIndex=$fromIndex, toIndex=$toIndex, size=$size")
        }
        val result = ArrayList<String>(toIndex - fromIndex)
        var i = 0
        var it = head
        while (i < toIndex && it != null) {
            if (i >= fromIndex) result.add(it.data)
            it = it.next
            i++
        }
        return result
    }
}
